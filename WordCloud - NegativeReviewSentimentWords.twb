<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20233.23.1017.0948                               -->
<workbook original-version='18.1' source-build='2023.3.0 (20233.23.1017.0948)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Filter Words' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='50'>
        <calculation class='tableau' formula='50' />
        <range granularity='10' max='100' min='10' />
      </column>
    </datasource>
    <datasource caption='neg_sentiment_word' inline='true' name='federated.0rhslev0ghfyru17bxvwi0ni4i39' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='neg_sentiment_word' name='textscan.1yws6g117jt5ls1fg67cz0oyoy4j'>
            <connection class='textscan' directory='C:/Users/SmartSystems/UpGrad - Capstone Project - Web &amp; Social Media Analytics/Capstone Project Submission/Tableau Files/WordCloud - NegativeReviewSentimentWords.twb Files/Data/Tableau Data Files' filename='neg_sentiment_word.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.1yws6g117jt5ls1fg67cz0oyoy4j' name='neg_sentiment_word.csv' table='[neg_sentiment_word#csv]' type='table'>
          <columns character-set='UTF-8' header='no' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='F2' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.1yws6g117jt5ls1fg67cz0oyoy4j' name='neg_sentiment_word.csv' table='[neg_sentiment_word#csv]' type='table'>
          <columns character-set='UTF-8' header='no' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='F2' ordinal='1' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[neg_sentiment_word.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;false&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[neg_sentiment_word.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[neg_sentiment_word.csv_A132A5D30F724B64B944E891604B113F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F2]</local-name>
            <parent-name>[neg_sentiment_word.csv]</parent-name>
            <remote-alias>F2</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[neg_sentiment_word.csv_A132A5D30F724B64B944E891604B113F]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[F2]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='neg_sentiment_word.csv' datatype='table' name='[__tableau_internal_object_id__].[neg_sentiment_word.csv_A132A5D30F724B64B944E891604B113F]' role='measure' type='quantitative' />
      <column-instance column='[F2]' derivation='None' name='[none:F2:nk]' pivot='key' type='nominal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:F2:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;charge&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;minutes&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;price&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;producto&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;well&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;amazon&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;android&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;great&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;months&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;people&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;power&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;replace&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;samsung&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;text&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;buy&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;money&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;note&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;problems&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;review&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;sim&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;hard&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;issue&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;bueno&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;day&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;excelente&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;poor&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;work&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;button&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;call&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;google&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;little&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;time&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;disappoint&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;purchase&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;take&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;version&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;apps&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;drop&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;iphone&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;screen&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;set&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;star&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;start&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;contact&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;days&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;expect&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;life&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;phone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;seller&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;stop&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;better&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;camera&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;galaxy&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;muy&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;try&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;like&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;pay&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;receive&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;slow&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;software&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;look&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;customer&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;hours&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;product&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;unlock&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;verizon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;data&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;love&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;memory&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;return&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;cell&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;device&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;fix&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;get&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;support&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;blu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;break&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;card&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;lot&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;run&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;update&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;use&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;app&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;bad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;message&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;quality&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;send&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;tell&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;feature&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;not&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;excelent&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;freeze&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;good&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;battery&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;mobile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;picture&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;problem&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;recommend&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;service&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;touch&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='neg_sentiment_word.csv' id='neg_sentiment_word.csv_A132A5D30F724B64B944E891604B113F'>
            <properties context=''>
              <relation connection='textscan.1yws6g117jt5ls1fg67cz0oyoy4j' name='neg_sentiment_word.csv' table='[neg_sentiment_word#csv]' type='table'>
                <columns character-set='UTF-8' header='no' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='F2' ordinal='1' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='neg_sentiment_word' name='federated.0rhslev0ghfyru17bxvwi0ni4i39' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Filter Words' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='50'>
              <calculation class='tableau' formula='50' />
              <range granularity='10' max='100' min='10' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0rhslev0ghfyru17bxvwi0ni4i39'>
            <column datatype='string' name='[F2]' role='dimension' type='nominal' />
            <column-instance column='[F2]' derivation='Count' name='[cnt:F2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[F2]' derivation='None' name='[none:F2:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([F2])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:F2:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <color column='[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]' />
              <size column='[federated.0rhslev0ghfyru17bxvwi0ni4i39].[cnt:F2:qk]' />
              <text column='[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{B2B2B775-7DB5-4DC4-B60D-BCF9A4A5D232}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' maximized='true' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='slider' param='[Parameters].[Parameter 1]' type='parameter' />
            <card pane-specification-id='0' param='[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rhslev0ghfyru17bxvwi0ni4i39].[none:F2:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{22B70521-B896-42E1-BC96-36F93B87436D}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
